-- MySQL Script generated by MySQL Workbench
-- Wed Jun 19 17:40:59 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema pruebaCastores
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `pruebaCastores` ;

-- -----------------------------------------------------
-- Schema pruebaCastores
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `pruebaCastores` DEFAULT CHARACTER SET utf8 ;
USE `pruebaCastores` ;

-- -----------------------------------------------------
-- Table `pruebaCastores`.`productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pruebaCastores`.`productos` ;

CREATE TABLE IF NOT EXISTS `pruebaCastores`.`productos` (
  `idProducto` INT(6) NOT NULL,
  `nombre` VARCHAR(40) NULL,
  `precio` DECIMAL(16,2) NULL,
  PRIMARY KEY (`idProducto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pruebaCastores`.`ventas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pruebaCastores`.`ventas` ;

CREATE TABLE IF NOT EXISTS `pruebaCastores`.`ventas` (
  `idventa` INT(6) NOT NULL,
  `idProducto` INT(6) NOT NULL,
  `cantidad` INT(6) NULL,
  PRIMARY KEY (`idventa`, `idProducto`))
ENGINE = InnoDB;

-- ------------------------------------------------------
-- INSERTS
-- ------------------------------------------------------
/*
insert into pruebacastores.productos (idProducto, nombre, precio) values (1,'LAPTOP',3000.00);
insert into pruebacastores.productos (idProducto, nombre, precio) values (2,'PC',4000.00);
insert into pruebacastores.productos (idProducto, nombre, precio) values (3,'MOUSE',100.00);
insert into pruebacastores.productos (idProducto, nombre, precio) values (4,'TECLADO',150.00);
insert into pruebacastores.productos (idProducto, nombre, precio) values (5,'MONITOR',2000.00);
insert into pruebacastores.productos (idProducto, nombre, precio) values (6,'MICROFONO',350.00);
insert into pruebacastores.productos (idProducto, nombre, precio) values (7,'AUDIFONOS',450.00);
*/
/*
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (1,5,8);
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (2,1,15);
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (3,6,13);
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (4,6,4);
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (5,2,3);
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (6,5,1);
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (7,4,5);
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (8,2,5);
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (9,6,2);
insert into pruebacastores.ventas (idVenta, idProducto, cantidad) values (10,1,8);
*/

-- ------------------------------------------------------------------------------------
-- QUERYS
-- ------------------------------------------------------------------------------------
# 1.5) Traer todos los productos que tengan una venta.
SELECT productos.idProducto, productos.nombre 
FROM productos INNER JOIN ventas 
ON productos.idProducto = ventas.idProducto 
GROUP BY idProducto;
# 1.6) Traer todos los productos que tengan ventas 
-- y la cantidad total de productos vendidos.
SELECT productos.idProducto, productos.nombre
, SUM(ventas.cantidad) AS vendidos 
FROM ventas INNER JOIN productos 
ON ventas.idProducto  = productos.idProducto
GROUP BY idProducto, nombre;
# 1.7) Traer todos los productos (independientemente de si tienen ventas o no) 
-- y la suma total ($) vendida por producto.
(SELECT pr.idProducto, pr.nombre, 0 as `$ total` 
FROM productos pr LEFT JOIN ventas ve 
ON pr.idProducto = ve.idProducto WHERE ve.idProducto IS NULL)
UNION
(SELECT p.idProducto, p.nombre,(SUM(v.cantidad) * p.precio) AS `$ total` 
FROM productos p INNER JOIN ventas v 
ON p.idProducto  = v.idProducto
GROUP BY p.idProducto, p.nombre, p.precio) ORDER BY idProducto;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;







